## üèóÔ∏è **Design e Arquitetura da Solu√ß√£o**

---

### 1. üìö Arquitetura Geral

A plataforma ser√° constru√≠da sobre a arquitetura **modular do Django Rest Framewok**, com separa√ß√£o de apps por dom√≠nio e responsabilidades bem definidas.

#### Camadas da Aplica√ß√£o:

```
urls (Endpoints) |
Views + Templates (Controllers) |
Serializer    |
Application Services (Use Cases) |
Models (Domain / ORM) |
Infra (DB, Storage, Stripe, Cloudinary)
```

---

### 2. üß± M√≥dulos da Aplica√ß√£o

| App        | Responsabilidade Principal                                |
| ---------- | --------------------------------------------------------- |
| `users`    | Registro, login, perfis, pap√©is (`student`, `instructor`) |
| `courses`  | Cursos, se√ß√µes, li√ß√µes, tipos de conte√∫do, progresso      |
| `payments` | L√≥gica de checkout, planos, assinatura, integra√ß√£o Stripe |
| `core`     | Landing page, menus, configura√ß√£o geral da plataforma     |
| `shared`   | M√≥dulos comuns: mixins, utils, form helpers, etc.         |

---

### 3. üì¶ Comunica√ß√£o entre Camadas

* Os m√≥dulos se comunicam **via import direto** entre apps (`from apps.users.models import Profile`), mantendo depend√™ncias unidirecionais.
* Views devem ser **finas**: orquestram apenas o fluxo e delegam l√≥gica para services no dom√≠nio (`services.py`, `managers.py`).
* Processos longos ou agendados (futuro): **tasks com Celery**.

---

### 4. üîÅ Componentes Externos

| Servi√ßo        | Integra√ß√£o                   | Descri√ß√£o                               |
| -------------- | ---------------------------- | --------------------------------------- |
| **Cloudinary** | REST API via SDK             | Upload e entrega de imagens e v√≠deos    |
| **Stripe**     | REST API via `stripe-python` | Checkout e Webhooks                     |
| **PostgreSQL** | Django ORM                   | Banco de dados relacional principal     |
| **Knox**       | Knox via Views & AuthToken   | Autentifica√ß√£o com uso de tokens        |

---

### 5. ‚öôÔ∏è Infraestrutura

| Ambiente        | Ferramenta                                  |
| --------------- | ------------------------------------------- |
| Desenvolvimento | uv +| Docker Compose (`api`, `db`, `nginx`) |
| Produ√ß√£o        | VPS (NGINX + Gunicorn + Docker)             |
| Deploy          | SSH + GitHub Actions                        |
| Banco de Dados  | PostgreSQL                                  |
| Logs            | stdout + arquivos rotacionados              |
| Monitoramento   | UptimeRobot (b√°sico, externo)               |

---

### 6. üìà Escalabilidade e Performance

* Banco otimizado com **UUID PKs**, **√≠ndices em campos usados em filtros** (`profile_id`, `lesson_id`).
* L√≥gica de acesso a curso controlada por roles e registros.
* Uso futuro de **cache local ou Redis** para planos de pre√ßos e menu.
* Uploads e m√≠dia sempre fora do servidor (Cloudinary via URL/CDN).
