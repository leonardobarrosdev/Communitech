# Documento: Decisões Técnicas
## Projeto: Comunitu – Plataforma de Comunidade e Aprendizagem Online (Clone Circle.so)

### 1. Linguagem e Framework

- **Linguagem:** Python 3.12+
- **Framework Web:** Django 5.2 + Django REST Framework (DRF)
- **Motivo da escolha:**
  - DRF é altamente produtivo para construção de APIs RESTful.
  - Django provê estrutura robusta para autenticação, permissões, ORM, administração e extensibilidade.
  - Comunidade madura e bom suporte para integrações como Stripe e Cloudinary.

---

### 2. Autenticação

- **Abordagem:** `AbstractUser` com autenticação via token (DRF Knox)
- **Motivo da escolha:**
  - Flexibilidade para personalizar o modelo de usuário desde o início.
  - DRF Knox fornece tokens expiráveis, com maior segurança em APIs públicas.

---

### 3. Pagamentos

- **Gateway:** Stripe
- **Abordagem:** Checkout + Webhook para conceder/remover acesso a cursos e espaços
- **Motivo da escolha:**
  - Stripe oferece API confiável, suporte a múltiplas moedas e planos de assinatura.
  - Possibilidade de expansão futura com billing, descontos, upsell, etc.

---

### 4. Banco de Dados

- **Banco:** PostgreSQL
- **Motivo da escolha:**
  - Suporte nativo a JSON, pesquisas full-text, e ótima performance para estruturas relacionais complexas.

---

### 5. Armazenamento de Mídia

- **Serviço:** Cloudinary
- **Motivo da escolha:**
  - Otimização automática de imagens e vídeos.
  - Fácil integração com Django e entrega por CDN.

---

### 6. Deploy e Infraestrutura

- **Empacotamento:** Docker + Docker Compose
- **Servidor Web:** NGINX + Gunicorn
- **Serviços em containers:**
  - `api` (Django)
  - `db` (PostgreSQL)
  - `nginx` (reverse proxy)
- **Motivo da escolha:**
  - Docker garante ambiente replicável para desenvolvimento e produção.
  - NGINX + Gunicorn é uma arquitetura padrão e robusta para aplicações Django.

---

### 7. Emails e Notificações

- **Envio:** SMTP (definido por ambiente)
- **Uso:** Notificações básicas (RSVP, alertas, anúncios)
- **Motivo da escolha:**
  - Simples, compatível com vários provedores (Sendgrid, Amazon SES, etc.)

---

### 8. Realtime / Live

- **Mensagens diretas e chat:** Em fase posterior. Inicialmente via API REST com polling.
- **Eventos ao vivo:** MVP utilizará integração com ferramentas externas (ex: Zoom ou Jitsi).
- **Live Rooms/Stream:** Será avaliado para versão futura com WebRTC ou integração 3rd-party.

---

### 9. Alternativas Consideradas (e descartadas)

| Alternativa          | Motivo de exclusão                     |
|----------------------|----------------------------------------|
| Firebase             | Não oferece controle granular de backend e DB relacional |
| Supabase             | Ainda imaturo para certas integrações (Stripe, AI) |
| Node.js + NestJS     | Boa estrutura, mas equipe com mais expertise em Django |
| FastAPI              | Mais enxuto, mas DRF tem mais recursos prontos |
| GraphQL              | Complexidade desnecessária no MVP |

---

### 10. Integrações Futura (Planejadas para fases seguintes)

- Notificações WebSocket (Django Channels)
- Busca avançada com ElasticSearch
- Lógica de AI copiloto com OpenAI / Langchain
