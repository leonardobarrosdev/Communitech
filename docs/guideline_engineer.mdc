## 🧭 **Guidelines de Engenharia (Engineering Guidelines)**

Este guia define os padrões e boas práticas a serem seguidos pela equipe de engenharia para garantir consistência, escalabilidade e qualidade no projeto.

---

### 1. 🏗️ Estrutura de Projeto Django

```bash
├── apps/
│   ├── user/             # Autenticação, perfis, papéis
│   ├── course/           # Cursos, seções, lições, progresso
│   ├── payment/          # Integração com Stripe
│   ├── core/             # Configurações globais, menus, landing
│   └── shared/           # Helpers reutilizáveis (utils, mixins)
├── config/               # Configuração geral do projeto Django
├── docker/               # Dockerfiles e configs
├── .env, .dockerignore   # Configs do ambiente
```

---

## 2. Padrão de Código

- **Estilo:** [PEP8](https://peps.python.org/pep-0008/)
- **Linter:** `flake8`
- **Formatter:** `black`
- **Import Sorter:** `isort` (opcional)

### 2.1. Testes

- Framework: `pytest` + `pytest-django`
- Estrutura de testes espelhando os apps
- Testes obrigatórios para modelos, views, permissões e integrações críticas

---

## 3. Convenções de Projeto

### 3.1. Models

- Usar `AbstractBaseModel` com campos padrão: `created_at`, `updated_at`
- Sempre usar `UUID` como `id` quando aplicável
- Criar modelos separados por domínio (ex: `Course`, `Lesson`, `Space`, `Event`, etc.)

### 3.2. Serializers

- Nomear como `<ModelName>Serializer`, `<ModelName>DetailSerializer`, etc.
- Validar regras de negócio no `validate_<field>`

### 3.3. Views e Routers

- Usar `ViewSet` sempre que possível
- Manter urls organizadas por namespace (`/api/courses/`, `/api/events/`, etc.)
- Permissões declaradas explicitamente

---

## 4. Boas Práticas

- Toda nova funcionalidade deve ter:
  - Migration
  - Testes
  - Serializers
  - Permissões claras
  - Documentação da rota via DRF schema

- Evitar lógica de negócio nas views – usar services/helpers

---

## 5. Versionamento e Branches

- `main`: versão estável
- `develop`: versão em desenvolvimento
- Feature branches: `feature/<nome-da-feature>`
- Hotfixes: `hotfix/<descricao>`

---

## 6. Commits e Pull Requests

- Convention: [Conventional Commits](https://www.conventionalcommits.org)
  
Exemplos:

feat(auth): implement login with Knox
fix(payment): resolve stripe webhook signature issue
refactor(user): improve model readability


- Pull Requests devem incluir:
  - Descrição do que foi feito
  - Link para issue (se aplicável)
  - Print de testes rodando (ou coverage)

---

## 7. Segurança

- Nunca subir `.env` ou chaves no repo
- Todos os dados sensíveis via variáveis de ambiente
- Verificar permissões antes de retornar dados sensíveis

---

## 8. Ferramentas de Apoio

- Debug: `ipdb`
- Testes: `pytest`, `coverage`
- Lint: `flake8`
- Formatter: `black`
- CI/CD (futuro): GitHub Actions

---

## 9. Repositório

- README com instruções de setup local
- Scripts `make` para facilitar comandos (`make run`, `make test`, `make migrate`)
- Documentação da API com `/api/schema/` e `/api/docs/`

---

## 10. Padrão de Logs

- Usar `logger = logging.getLogger(__name__)` nos arquivos
- Nível padrão: `INFO`, usar `ERROR` em exceções
- Logar erros de Stripe, autenticação, e webhooks críticos
