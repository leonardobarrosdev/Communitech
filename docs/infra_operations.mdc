# Documento: Infraestrutura & Operações
## Projeto: Comunitu – Plataforma de Comunidade e Aprendizagem Online

---

## 1. Arquitetura de Infraestrutura

### 1.1. Estrutura Base com Docker Compose

Serviços definidos no `docker-compose.yml`:

| Serviço     | Descrição                                   |
|-------------|---------------------------------------------|
| `api`       | Backend Django REST Framework (porta 8000)  |
| `db`        | PostgreSQL 14+ (porta 5432)                 |
| `nginx`     | Reverse Proxy para servir a aplicação       |

> Outras opções futuras:
> - `redis` (cache/WebSocket)
> - `celery` (tarefas assíncronas)
> - `certbot` (renovação de SSL automática)

---

## 2. Servidor de Produção

- **Provedor:** VPS (ex: DigitalOcean, Contabo, Linode)
- **Sistema Operacional:** Ubuntu Server 22.04 LTS
- **Serviços em produção:**
  - `Gunicorn` (WSGI Server)
  - `NGINX` (Reverse Proxy, Static/Media handler)
  - `PostgreSQL` (gerenciado ou local)
  - `Docker + Compose` para orquestração

---

## 3. Configuração de Ambientes

### 3.1. Variáveis de Ambiente (via `.env`)

Exemplo de variáveis sensíveis e configuráveis:

DEBUG=False
DJANGO_SECRET_KEY=...
DATABASE_URL=postgres://user:pass@db:5432/dbname
CLOUDINARY_URL=cloudinary://...
STRIPE_SECRET_KEY=...
STRIPE_WEBHOOK_SECRET=...
EMAIL_HOST=smtp.sendgrid.net
EMAIL_HOST_USER=apikey
EMAIL_HOST_PASSWORD=...
ALLOWED_HOSTS=localhost,127.0.0.1,api.seudominio.com


> As variáveis não são versionadas. O projeto utiliza o pacote `django-environ` para carregamento automático.

---

### 3.2. Ambientes Suportados

| Ambiente   | Características                                       |
|------------|--------------------------------------------------------|
| `local`    | Dev local com Docker, `DEBUG=True`, DB persistente    |
| `staging`  | Pré-produção, com deploy em VPS                       |
| `prod`     | Produção, com HTTPS, otimizações e monitoramento      |

---

## 4. Pipeline de Deploy Manual (MVP)

### 4.1. Fluxo atual de deploy:

1. SSH na VPS
2. Pull do código via Git
3. Carregamento de `.env.prod`
4. `docker-compose -f docker-compose.prod.yml up -d --build`
5. Testes de conectividade
6. Checagem de logs (`docker-compose logs -f api`)

> Em breve, adicionar deploy automatizado com GitHub Actions ou Ansible.

---

## 5. Arquivos Estáticos e Mídia

- Servidos via `WhiteNoise` no ambiente de produção.
- Imagens e vídeos do usuário hospedados no **Cloudinary** via API.

---

## 6. Backups e Logs

- Backups automáticos do banco via `pg_dump` (cron job semanal).
- Logs de aplicação roteados para `stdout` com configuração de `logging` no `settings.py`.
- Planejamento de integração futura com ferramentas como:
  - **Sentry** (erros)
  - **UptimeRobot** ou **BetterStack** (uptime)
  - **Logtail** ou **Grafana Loki** (logs estruturados)

---

## 7. Domínio e HTTPS

- Uso de domínio customizado (`comunitu.app` ou similar)
- **NGINX** configurado com **Let’s Encrypt** para SSL automático
- Certificados renovados com `certbot` (cron job mensal)

---

## 8. Monitoramento e Manutenção

- Health-check exposto em `/api/health/`
- Monitoramento básico:
  - Tempo de resposta (NGINX logs)
  - Uso de CPU/RAM com `htop` e `docker stats`
- Atualizações de segurança semanais com `apt upgrade`

---

## 9. Extensões Futuras Planejadas

- Suporte a WebSocket (via Django Channels)
- Cluster Redis + Celery (tarefas em background)
- CDN para arquivos estáticos/mídia (Cloudflare)
- Deploy com CI/CD completo

