# Documento: Requisitos do Sistema

## Projeto: Comunitu – Plataforma de Comunidade e Aprendizagem Online

---

## 1. Requisitos Funcionais

### 1.1. Autenticação e Autorização

* Registro e login de usuários com e-mail e senha.
* Logout com expiração de token (via DRF Knox).
* Middleware para proteger rotas autenticadas.
* Controle de permissões por função (admin, moderador, membro).
* Atribuição de acesso a espaços ou cursos com base em pagamento.

---

### 1.2. Gerenciamento de Comunidades

* Criação de comunidades com múltiplos espaços (Espaços Públicos, Privados e Secretos).
* Organização por grupos de espaços.
* Moderação de conteúdos (deleção de postagens).
* Visualização de atividade dos membros (entradas, visualizações, posts).

---

### 1.3. Publicações e Comunicação

* Editor de postagens com tinymce e plugin de IA.
* Upload de imagens, vídeos e arquivos (via Cloudinary).
* Comentários com threads de resposta.
* Mensagens diretas e chat em grupo (inicialmente não em tempo real).
* Indicação de status online/offline (versão futura).

---

### 1.4. Cursos Online

* Criação de cursos com seções e lições.
* Tipos de curso: Autônomo, Estruturado e Agendado.
* Suporte a vídeo, áudio, PDF, embed.
* Interface drag-and-drop para organização de conteúdo (frontend).
* Marcar lição como concluída.

---

### 1.5. Eventos e Transmissões

* Agendamento de eventos com RSVP.
* Envio de lembrete por e-mail.
* Suporte para link externo de transmissão (ex: Zoom).
* Compartilhamento de tela (fase futura).

---

### 1.6. Monetização

* Integração com Stripe para pagamentos únicos e recorrentes.
* Criação de espaços e cursos pagos.
* Controle de acesso baseado em status de pagamento.
* Criação de cupons e múltiplos planos.
* Suporte a múltiplas moedas.

---

### 1.7. Customização

* Upload de logo e banner da comunidade.
* Definição de cores do tema.
* Menus de navegação personalizados.
* Suporte a domínio próprio.
* Adicionar credenciais de acesso a "provedores de AI"

---

### 1.8. Comunicação e Notificações

* Envio de notificações por e-mail (RSVP, alertas de curso, anúncios).
* Digest semanal com resumo de atividades.
* Notificações push (fase futura).

---

### 1.9. Landing Pages

* Página básica de acesso ("lock screen") para espaços privados.
* Estrutura com título, descrição, CTA.

---

### 1.10. Central de Ajuda

* Inclusão de artigos ou links externos.
* Fórum básico para suporte entre membros.

---

### 1.11. Automações

* Workflows simples: executar ações com base em um evento.
* Ex: ao completar curso, dar acesso a novo espaço.
* Ações em massa: marcar membros, enviar mensagens.

---

### 1.12. Funcionalidades de IA (Básicas)

* Na criação de aula: Criar tutorial baseado no vídeo, continuar ou melhorar escrita basedado em rascunho que foi feito no editor de texto tinymce.

---

## 2. Requisitos Não Funcionais

### 2.1. Performance

* Tempo de resposta médio da API: < 500ms
* Capacidade para lidar com +10 mil membros ativos por comunidade (foco em escalabilidade futura)

---

### 2.2. Escalabilidade

* Separação clara por módulos (apps Django).
* Estrutura de banco relacional bem normalizada.
* Cache reverso com NGINX (futuro uso de Redis).

---

### 2.3. Segurança

* Criptografia de senha (bcrypt).
* Criptografia de credenciais de acesso a API de AI.
* Proteção contra CSRF, XSS, SQL Injection (via middlewares e práticas Django).
* Validação e sanitização de input.
* Webhooks protegidos com verificação de assinatura (Stripe).

---

### 2.4. Portabilidade

* Ambientes de desenvolvimento replicáveis via Docker.
* Separação clara entre config local e produção via `.env`.

---

### 2.5. Observabilidade

* Logs centralizados (stdout + logger do Django).
* Preparação futura para integração com Sentry ou LogRocket (frontend).
* Monitoramento de uptime (Health check).

---

### 2.6. Manutenibilidade

* Código documentado e testado com `pytest`.
* Estrutura de projeto clara com apps modulares.
* Uso de Black + Flake8 para padronização de estilo.

---

### 2.7. Internacionalização

* Base preparada para tradução futura (i18n).
